DONE -- * Replace $redis with Xedni.connection
DONE -- * Add MIT license headers to all files.

* update / read  can handle an array for record _id
* update weights is a subset of above

* Update weights on a record, or bulk update weights

* Don't serialize records internally
  Put record data into a hash (collections) ,  (scores) and read them in && return.



* Data coming in should be LUA-OBJ-NOTATION, coming out is JSON.

* Split files up a bit.

* Rails plugin and mixin /etc
  test mode goes to the Xedni directly, otherwise hit's Xedni server (URL in configuration file)

* Tests and benchmarks

* Optional faceting style -- Exclusive facets? or more like tags?

* Keep a list of all collections in the system - so there is no need for [key, true]
* Return page, per_page, total_count.  Calculate total_pages, next_page, prev_page in the Xedni code on the ruby-side.

REDIS:
  do pull-request on branch -- to implement the new syntax.

RAILS:
* Pass in connection data on startup  (in plugin this comes from config/xedni.yml -- and is read on init)
  Needs to have :include field, so you can include other records when fetching the records from xedni.search

XedniServer:
  Metrics reports -- how many collections, keys, etc... (websockets, so it's updated very quickly)
  Reports on every query, length of query, what it was searching, from which IP, etc.
  Slow Query Logs -- what is taking a long long time?
  Don't do this on redis, do it in RAM / disk?
  Logger for everything too.

  Can push metrics up to somewhere?

  Real REST-fulness.  parse POST params like they should be.  Parse GET Url parameters as well.
